/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CbButton {
        "disabled": boolean;
        "size": string;
        "tier": string;
    }
    interface CbCalendar {
        "ctrlValue": string;
    }
    interface CbIcon {
        "name": string;
        "size": string;
    }
    interface CbInput {
    }
    interface CbModal {
        "close": () => Promise<void>;
        "ignoreBackDrop": boolean;
        "modalOpen": boolean;
        "open": () => Promise<void>;
    }
    interface CbModalBody {
    }
    interface CbModalFooter {
    }
    interface CbModalHeader {
    }
    interface CbTooltip {
        "position": string;
        "text": string;
        "trigger": string;
    }
}
declare global {
    interface HTMLCbButtonElement extends Components.CbButton, HTMLStencilElement {
    }
    var HTMLCbButtonElement: {
        prototype: HTMLCbButtonElement;
        new (): HTMLCbButtonElement;
    };
    interface HTMLCbCalendarElement extends Components.CbCalendar, HTMLStencilElement {
    }
    var HTMLCbCalendarElement: {
        prototype: HTMLCbCalendarElement;
        new (): HTMLCbCalendarElement;
    };
    interface HTMLCbIconElement extends Components.CbIcon, HTMLStencilElement {
    }
    var HTMLCbIconElement: {
        prototype: HTMLCbIconElement;
        new (): HTMLCbIconElement;
    };
    interface HTMLCbInputElement extends Components.CbInput, HTMLStencilElement {
    }
    var HTMLCbInputElement: {
        prototype: HTMLCbInputElement;
        new (): HTMLCbInputElement;
    };
    interface HTMLCbModalElement extends Components.CbModal, HTMLStencilElement {
    }
    var HTMLCbModalElement: {
        prototype: HTMLCbModalElement;
        new (): HTMLCbModalElement;
    };
    interface HTMLCbModalBodyElement extends Components.CbModalBody, HTMLStencilElement {
    }
    var HTMLCbModalBodyElement: {
        prototype: HTMLCbModalBodyElement;
        new (): HTMLCbModalBodyElement;
    };
    interface HTMLCbModalFooterElement extends Components.CbModalFooter, HTMLStencilElement {
    }
    var HTMLCbModalFooterElement: {
        prototype: HTMLCbModalFooterElement;
        new (): HTMLCbModalFooterElement;
    };
    interface HTMLCbModalHeaderElement extends Components.CbModalHeader, HTMLStencilElement {
    }
    var HTMLCbModalHeaderElement: {
        prototype: HTMLCbModalHeaderElement;
        new (): HTMLCbModalHeaderElement;
    };
    interface HTMLCbTooltipElement extends Components.CbTooltip, HTMLStencilElement {
    }
    var HTMLCbTooltipElement: {
        prototype: HTMLCbTooltipElement;
        new (): HTMLCbTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "cb-button": HTMLCbButtonElement;
        "cb-calendar": HTMLCbCalendarElement;
        "cb-icon": HTMLCbIconElement;
        "cb-input": HTMLCbInputElement;
        "cb-modal": HTMLCbModalElement;
        "cb-modal-body": HTMLCbModalBodyElement;
        "cb-modal-footer": HTMLCbModalFooterElement;
        "cb-modal-header": HTMLCbModalHeaderElement;
        "cb-tooltip": HTMLCbTooltipElement;
    }
}
declare namespace LocalJSX {
    interface CbButton {
        "disabled"?: boolean;
        "size"?: string;
        "tier"?: string;
    }
    interface CbCalendar {
        "ctrlValue"?: string;
        "onValueChanged"?: (event: CustomEvent<string>) => void;
    }
    interface CbIcon {
        "name"?: string;
        "size"?: string;
    }
    interface CbInput {
    }
    interface CbModal {
        "ignoreBackDrop"?: boolean;
        "modalOpen"?: boolean;
    }
    interface CbModalBody {
    }
    interface CbModalFooter {
    }
    interface CbModalHeader {
        "onOnClickIconCloseModal"?: (event: CustomEvent<boolean>) => void;
    }
    interface CbTooltip {
        "position"?: string;
        "text"?: string;
        "trigger"?: string;
    }
    interface IntrinsicElements {
        "cb-button": CbButton;
        "cb-calendar": CbCalendar;
        "cb-icon": CbIcon;
        "cb-input": CbInput;
        "cb-modal": CbModal;
        "cb-modal-body": CbModalBody;
        "cb-modal-footer": CbModalFooter;
        "cb-modal-header": CbModalHeader;
        "cb-tooltip": CbTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cb-button": LocalJSX.CbButton & JSXBase.HTMLAttributes<HTMLCbButtonElement>;
            "cb-calendar": LocalJSX.CbCalendar & JSXBase.HTMLAttributes<HTMLCbCalendarElement>;
            "cb-icon": LocalJSX.CbIcon & JSXBase.HTMLAttributes<HTMLCbIconElement>;
            "cb-input": LocalJSX.CbInput & JSXBase.HTMLAttributes<HTMLCbInputElement>;
            "cb-modal": LocalJSX.CbModal & JSXBase.HTMLAttributes<HTMLCbModalElement>;
            "cb-modal-body": LocalJSX.CbModalBody & JSXBase.HTMLAttributes<HTMLCbModalBodyElement>;
            "cb-modal-footer": LocalJSX.CbModalFooter & JSXBase.HTMLAttributes<HTMLCbModalFooterElement>;
            "cb-modal-header": LocalJSX.CbModalHeader & JSXBase.HTMLAttributes<HTMLCbModalHeaderElement>;
            "cb-tooltip": LocalJSX.CbTooltip & JSXBase.HTMLAttributes<HTMLCbTooltipElement>;
        }
    }
}
